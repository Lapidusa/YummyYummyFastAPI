project/
│
├── app/
│   ├── api/                     # Контроллеры (роуты)
│   │   ├── v1/                  # Версии API
│   │   │   ├── endpoints/       # Эндпоинты (например, orders.py, users.py)
│   │   │   └── __init__.py
│   │   └── __init__.py
│   │
│   ├── core/                    # Основная логика приложения
│   │   ├── config.py            # Конфигурация приложения (например, настройки базы данных, JWT)
│   │   ├── security.py          # Логика безопасности (JWT, роли)
│   │   └── __init__.py
│   │
│   ├── db/                      # Работа с базой данных
│   │   ├── base.py              # Базовые настройки SQLAlchemy
│   │   ├── models/              # Модели базы данных
│   │   │   ├── order.py
│   │   │   ├── user.py
│   │   │   └── __init__.py
│   │   ├── migrations/          # Миграции базы данных (например, Alembic)
│   │   └── __init__.py
│   │
│   ├── services/                # Бизнес-логика
│   │   ├── order_service.py     # Логика обработки заказов
│   │   ├── user_service.py      # Логика работы с пользователями
│   │   └── __init__.py
│   │
│   ├── schemas/                 # DTO (Pydantic-схемы)
│   │   ├── order.py             # Схемы для заказов
│   │   ├── user.py              # Схемы для пользователей
│   │   └── __init__.py
│   │
│   └── __init__.py
│
├── tests/                       # Тесты
│   ├── test_api/                # Тесты API
│   ├── test_services/           # Тесты бизнес-логики
│   └── __init__.py
│
├── main.py                      # Точка входа в приложение
├── requirements.txt             # Зависимости проекта
└── alembic.ini                  # Конфигурация Alembic для миграций


from logging.config import fileConfig
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import pool
from alembic import context

from app.core.config import settings
from app.db.base import Base  # Импортируйте ваш Base
from app.db.base_models import *

# Настройки Alembic
config = context.config
config.set_main_option("sqlalchemy.url", settings.DATABASE_URL)
# Настройка логирования
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Укажите метаданные ваших моделей
target_metadata = Base.metadata

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    connectable = create_async_engine(
        config.get_main_option("sqlalchemy.url"),
        poolclass=pool.NullPool,
    )

    async def do_run_migrations():
        async with connectable.connect() as connection:
            await connection.run_sync(
                lambda conn: context.configure(
                    connection=conn,
                    target_metadata=target_metadata,
                )
            )
            await connection.run_sync(lambda conn: context.run_migrations())

    import asyncio
    asyncio.run(do_run_migrations())

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()


from logging.config import fileConfig
from sqlalchemy import pool
from sqlalchemy.engine import Connection
from alembic import context
from sqlalchemy.ext.asyncio import AsyncEngine, create_async_engine
from app.db.base import Base  # Импортируйте Base из вашего проекта
from app.core.config import settings  # Импортируйте настройки, где хранится DATABASE_URL
from app.db.base_models import *

# Этот объект Alembic Config предоставляет доступ к значениям из файла .ini
config = context.config

# Настройка логирования
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Укажите метаданные ваших моделей для автогенерации миграций
target_metadata = Base.metadata


def run_migrations_offline() -> None:
    """Запуск миграций в 'offline' режиме.

    В этом режиме создается URL подключения, и миграции выполняются без подключения к базе данных.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection: Connection) -> None:
    """Выполнение миграций."""
    context.configure(
        connection=connection,
        target_metadata=target_metadata,
    )

    with context.begin_transaction():
        context.run_migrations()


async def run_migrations_online() -> None:
    """Запуск миграций в 'online' режиме.

    В этом режиме создается асинхронный движок и подключение к базе данных.
    """
    connectable = create_async_engine(
        settings.DATABASE_URL,  # Используем URL из настроек
        poolclass=pool.NullPool,
    )

    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)

    await connectable.dispose()


if context.is_offline_mode():
    run_migrations_offline()
else:
    import asyncio

    asyncio.run(run_migrations_online())



